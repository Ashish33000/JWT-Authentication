package com.masai.Config;

import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.crypto.SecretKey;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtTokenGenaratorFilter extends OncePerRequestFilter {

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		System.out.println("inside do filter");
		Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
		if(null!=authentication) {
			SecretKey key=Keys.hmacShaKeyFor(SecutityConstant.JWT_KEY.getBytes());
			String jwt=Jwts.builder()
					.setIssuer("Ashish")
					.setSubject("JWT TOKEN")
					.claim("username", authentication.getName())
					.claim("authorities", populateAuthorities(authentication.getAuthorities()))
					.setIssuedAt(new Date())
					.setExpiration(new Date(new Date().getTime()+30000000))
					.signWith(key).compact();
			response.setHeader(SecutityConstant.JWT_HEADER, jwt);
		}
		
		filterChain.doFilter(request, response);
	}
	
	private Object populateAuthorities(Collection<? extends GrantedAuthority> authorities) {
		Set<String> authSet=new HashSet<>();
		for(GrantedAuthority auth:authorities) {
			authSet.add(auth.getAuthority());
		}
		return String.join(",", authSet);
	}

	@Override
	protected boolean shouldNotFilter(HttpServletRequest request)throws ServletException{
		return !request.getServletPath().equals("/signIn");
	}

	

}
